%=======================================================
% Main module for the TT model
% by Chema Ferrero and Jf Rodriguez
% Takes the dY value from the HHmodel.m code generated by COR
% Y: state variable vector
% Y = {V , n , m , h}
%
%  *   Usage:                                                                *
%  *   Settings can be stored in a structure and passed to the main function *
%  *   These settings include (among other things):                          *
%  *     - BCL                 (pacing cycle length in ms)                   *
%  *     - TSim                (duration of the simulation in milliseconds)  *
%  *     - NumStim             (number of APs to calculate)                  *
%  *     - storeLast           (the number of beats that will be stored)     *
%  *     - etc                                                               *
%  *                                                                         *
%  *   Example:                                                              *
%  *     settings.BCL = 800; settings.NumStim = 75;                          * 
%  *     f_ph_Na=1.0; f_ph_CaL=1.0; f_ph_NaCa=1.0;
%  *     [State, t] = TT_endo_Ko_main(settings,f_ph_Na,f_ph_CaL,f_ph_NaCa);  *
%  *     plot(t, StateVars(:,10));                                           *
%  *                                                                         *
%  *   The program will return a structure with all individual currents, a   *
%  *   complete overview of the state vector over time and a list of the     *
%  *   evaluated time points.                                                *
%  *    
%-------------------------------------------------------------------------------
% State variables
%-------------------------------------------------------------------------------

% 1: d (dimensionless) (in L_type_Ca_current_d_gate)
% 2: fCa (dimensionless) (in L_type_Ca_current_fCa_gate)
% 3: f (dimensionless) (in L_type_Ca_current_f_gate)
% 4: Ca_SR (millimolar) (in calcium_dynamics)
% 5: Ca_i (millimolar) (in calcium_dynamics)
% 6: g (dimensionless) (in calcium_dynamics)
% 7: h (dimensionless) (in fast_sodium_current_h_gate)
% 8: j (dimensionless) (in fast_sodium_current_j_gate)
% 9: m (dimensionless) (in fast_sodium_current_m_gate)
% 10: V (millivolt) (in membrane)
% 11: K_i (millimolar) (in potassium_dynamics)
% 12: Xr1 (dimensionless) (in rapid_time_dependent_potassium_current_Xr1_gate)
% 13: Xr2 (dimensionless) (in rapid_time_dependent_potassium_current_Xr2_gate)
% 14: Xs (dimensionless) (in slow_time_dependent_potassium_current_Xs_gate)
% 15: Na_i (millimolar) (in sodium_dynamics)
% 16: r (dimensionless) (in transient_outward_current_r_gate)
% 17: s (dimensionless) (in transient_outward_current_s_gate)
% 18: K_o (millimolar) (in potassium_dynamics)
%
%  *   This m-file depends on the following files:                           *
%      TT_end_Ko_model.m
%=======================================================

function [StateVars,Ti]=TT_endo_Ko_main(settings,f_ph_Na,f_ph_CaL,f_ph_NaCa)
	settings = setDefaultSettings(settings);
	StateVars = [];
	Ti=[];
	x0 = getInitialVector(settings); 	% Initial conditions
    t_start = tic;
    str = sprintf('Preconditioning %3.0f sec!. Be patient ...',750*settings.BCL/1000);    
    h4 = waitbar(0,str);
    progress=0;
    t0 = clock;
	opts= odeset('RelTol',1e-3);
    for p=1:750
        %disp(['Calculating AP ', num2str(p), ' / ', num2str(settings.NumStim)]);
        [t,X]=ode15s('TT_endo_Ko_model',[0 settings.BCL],x0,opts,settings,p);

        waitbar(p/750,h4)
        x0=[X(end,1:end)];
    end
    close(h4)
%
%   Start the protocol and observation period
%
    settings.f_ph_Na=f_ph_Na;
    settings.f_ph_CaL=f_ph_CaL;
    settings.f_ph_NaCa=f_ph_NaCa;
    str = sprintf('Initiating observation Period %2.0f sec!. Be patient ...',settings.BCL*settings.NumStim/1000);
    h4 = waitbar(0,str); 
    for p=1:settings.NumStim
        %disp(['Calculating AP ', num2str(p), ' / ', num2str(settings.NumStim)]);
        [t,X]=ode15s('TT_endo_Ko_model',[0 settings.BCL],x0,opts,settings,p);

        waitbar(p/settings.NumStim,h4)
        x0=[X(end,1:end)];
        
        if p > settings.NumStim - settings.storeLast
            Ti=[Ti; t+(settings.BCL*(p-1-(settings.NumStim - settings.storeLast)))];
            StateVars=[StateVars; X];
        end
    end
    close(h4)
	t_elapsed = toc(t_start)
%    Ti=Ti./(1000*60);
	
end


function StateInit = getInitialVector(data)
    StateInit = [0.0, 1.0, 1.0, 0.2, 0.0002, 1.0, 0.75, 0.75, 0.0, -86.2, 138.3, 0.0, 1.0, 0.0, 11.6, 0.0, 1.0, 5.4];	% Initial conditions commented in COR-generated code
end

function settings = setDefaultSettings(settings)
% in the future, the stimulation parameters will override those in the COR-generated code
	if ~isfield(settings, 'dt'), settings.dt = 0.01; end		% time step for forward euler method
%    if ~isfield(settings, 'TSim'), settings.TSim = 600; end		% duration of the simulation in milliseconds
	if ~isfield(settings, 'NumStim'), settings.NumStim= 75; end
    if ~isfield(settings, 'storeLast'), settings.storeLast = 1; end
	if ~isfield(settings, 'StimOffset'), settings.StimOffset = 0; end		% offset of the first stimuls in milliseconds
    if ~isfield(settings, 'BCL'), settings.BCL = 800; end
    if ~isfield(settings, 'Amp_stim'), settings.Amp_stim = -52; end
    if ~isfield(settings, 'Dur_stim'), settings.Dur_stim = 1; end
    if ~isfield(settings, 'f_ph_Na'), settings.f_ph_Na = 1.0; end    
    if ~isfield(settings, 'f_ph_CaL'), settings.f_ph_CaL = 1.0; end    
    if ~isfield(settings, 'f_ph_NaCa'), settings.f_ph_NaCa = 1.0; end    	
end



